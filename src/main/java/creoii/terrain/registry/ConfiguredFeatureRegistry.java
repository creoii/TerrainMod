package creoii.terrain.registry;

import net.minecraft.world.gen.feature.VegetationPatchFeatureConfig;

public class ConfiguredFeatureRegistry {
    //public static final ConfiguredFeature<?, ?> BLANK = Feature.NO_OP.configure(DefaultFeatureConfig.DEFAULT);
//
    //public static final ConfiguredFeature<?, ?> SMALL_YELLOW_CAVE_MUSHROOM = Feature.TREE.configure(new TreeFeatureConfig.Builder(SimpleBlockStateProvider.of(BlockRegistry.CAVE_MUSHROOM_STEM), new StraightTrunkPlacer(3, 1, 0), SimpleBlockStateProvider.of(BlockRegistry.YELLOW_CAVE_MUSHROOM_BLOCK), new BlobFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 1), new TwoLayersFeatureSize(1, 0, 1)).dirtProvider(SimpleBlockStateProvider.of(Blocks.GRASS_BLOCK)).forceDirt().build());
    //public static final ConfiguredFeature<TreeFeatureConfig, ?> SMALL_PURPLE_CAVE_MUSHROOM = Feature.TREE.configure(new TreeFeatureConfig.Builder(SimpleBlockStateProvider.of(BlockRegistry.CAVE_MUSHROOM_STEM), new StraightTrunkPlacer(3, 1, 0), SimpleBlockStateProvider.of(BlockRegistry.PURPLE_CAVE_MUSHROOM_BLOCK), new BlobFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 1), new TwoLayersFeatureSize(1, 0, 1)).dirtProvider(SimpleBlockStateProvider.of(Blocks.GRASS_BLOCK)).forceDirt().build());
    //public static final ConfiguredFeature<TreeFeatureConfig, ?> SMALL_GREEN_CAVE_MUSHROOM = Feature.TREE.configure(new TreeFeatureConfig.Builder(SimpleBlockStateProvider.of(BlockRegistry.CAVE_MUSHROOM_STEM), new StraightTrunkPlacer(3, 1, 0), SimpleBlockStateProvider.of(BlockRegistry.GREEN_CAVE_MUSHROOM_BLOCK), new BlobFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 1), new TwoLayersFeatureSize(1, 0, 1)).dirtProvider(SimpleBlockStateProvider.of(Blocks.GRASS_BLOCK)).forceDirt().build());
    //public static final ConfiguredFeature<TreeFeatureConfig, ?> SMALL_BLUE_CAVE_MUSHROOM = Feature.TREE.configure(new TreeFeatureConfig.Builder(SimpleBlockStateProvider.of(BlockRegistry.CAVE_MUSHROOM_STEM), new StraightTrunkPlacer(3, 1, 0), SimpleBlockStateProvider.of(BlockRegistry.BLUE_CAVE_MUSHROOM_BLOCK), new BlobFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 1), new TwoLayersFeatureSize(1, 0, 1)).dirtProvider(SimpleBlockStateProvider.of(Blocks.GRASS_BLOCK)).forceDirt().build());
    //public static final ConfiguredFeature<TreeFeatureConfig, ?> LARGE_YELLOW_CAVE_MUSHROOM = Feature.TREE.configure(new TreeFeatureConfig.Builder(SimpleBlockStateProvider.of(BlockRegistry.CAVE_MUSHROOM_STEM), new StraightTrunkPlacer(5, 4, 3), SimpleBlockStateProvider.of(BlockRegistry.YELLOW_CAVE_MUSHROOM_BLOCK), new BlobFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 2), new TwoLayersFeatureSize(1, 0, 1)).dirtProvider(SimpleBlockStateProvider.of(Blocks.GRASS_BLOCK)).forceDirt().build());
    //public static final ConfiguredFeature<TreeFeatureConfig, ?> LARGE_PURPLE_CAVE_MUSHROOM = Feature.TREE.configure(new TreeFeatureConfig.Builder(SimpleBlockStateProvider.of(BlockRegistry.CAVE_MUSHROOM_STEM), new StraightTrunkPlacer(5, 4, 3), SimpleBlockStateProvider.of(BlockRegistry.PURPLE_CAVE_MUSHROOM_BLOCK), new BlobFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 2), new TwoLayersFeatureSize(1, 0, 1)).dirtProvider(SimpleBlockStateProvider.of(Blocks.GRASS_BLOCK)).forceDirt().build());
    //public static final ConfiguredFeature<TreeFeatureConfig, ?> LARGE_GREEN_CAVE_MUSHROOM = Feature.TREE.configure(new TreeFeatureConfig.Builder(SimpleBlockStateProvider.of(BlockRegistry.CAVE_MUSHROOM_STEM), new StraightTrunkPlacer(5, 4, 3), SimpleBlockStateProvider.of(BlockRegistry.GREEN_CAVE_MUSHROOM_BLOCK), new BlobFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 2), new TwoLayersFeatureSize(1, 0, 1)).dirtProvider(SimpleBlockStateProvider.of(Blocks.GRASS_BLOCK)).forceDirt().build());
    //public static final ConfiguredFeature<TreeFeatureConfig, ?> LARGE_BLUE_CAVE_MUSHROOM = Feature.TREE.configure(new TreeFeatureConfig.Builder(SimpleBlockStateProvider.of(BlockRegistry.CAVE_MUSHROOM_STEM), new StraightTrunkPlacer(5, 4, 3), SimpleBlockStateProvider.of(BlockRegistry.BLUE_CAVE_MUSHROOM_BLOCK), new BlobFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0), 2), new TwoLayersFeatureSize(1, 0, 1)).dirtProvider(SimpleBlockStateProvider.of(Blocks.GRASS_BLOCK)).forceDirt().build());
    //public static final ConfiguredFeature<?, ?> CAVE_MUSHROOM_VEGETATION = Feature.SIMPLE_BLOCK.configure(new SimpleBlockFeatureConfig(new WeightedBlockStateProvider(new DataPool.Builder<BlockState>().add(BlockRegistry.YELLOW_CAVE_MUSHROOM.getDefaultState(), 1).add(BlockRegistry.PURPLE_CAVE_MUSHROOM.getDefaultState(), 1).add(BlockRegistry.GREEN_CAVE_MUSHROOM.getDefaultState(), 1).add(BlockRegistry.BLUE_CAVE_MUSHROOM.getDefaultState(), 1).build())));
    //public static final ConfiguredFeature<?, ?> MYCELIUM_PATCH = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.MOSS_REPLACEABLE.getId(), SimpleBlockStateProvider.of(Blocks.MYCELIUM), () -> CAVE_MUSHROOM_VEGETATION, VerticalSurfaceType.FLOOR, ConstantIntProvider.create(1), 0.0F, 5, 0.005F, UniformIntProvider.create(4, 7), 0.3F));
    //public static final ConfiguredFeature<?, ?> MUSHROOM_CAVES_VEGETATION = MYCELIUM_PATCH.decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.FLOOR, 12, false))).range(Decorators.BOTTOM_TO_TOP_BELOW_120).spreadHorizontally().repeat(60);
    //public static final ConfiguredFeature<?, ?> MYCELIUM_WITH_YELLOW_CAVE_MUSHROOM = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.LUSH_GROUND_REPLACEABLE.getId(), SimpleBlockStateProvider.of(Blocks.MYCELIUM), () -> Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> SMALL_YELLOW_CAVE_MUSHROOM, () -> LARGE_YELLOW_CAVE_MUSHROOM)), VerticalSurfaceType.FLOOR, ConstantIntProvider.create(3), 0.8F, 2, 0.08F, UniformIntProvider.create(4, 7), 0.7F));
    //public static final ConfiguredFeature<?, ?> MYCELIUM_WITH_PURPLE_CAVE_MUSHROOM = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.LUSH_GROUND_REPLACEABLE.getId(), SimpleBlockStateProvider.of(Blocks.MYCELIUM), () -> Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> SMALL_PURPLE_CAVE_MUSHROOM, () -> LARGE_PURPLE_CAVE_MUSHROOM)), VerticalSurfaceType.FLOOR, ConstantIntProvider.create(3), 0.8F, 2, 0.08F, UniformIntProvider.create(4, 7), 0.7F));
    //public static final ConfiguredFeature<?, ?> MYCELIUM_WITH_GREEN_CAVE_MUSHROOM = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.LUSH_GROUND_REPLACEABLE.getId(), SimpleBlockStateProvider.of(Blocks.MYCELIUM), () -> Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> SMALL_GREEN_CAVE_MUSHROOM, () -> LARGE_GREEN_CAVE_MUSHROOM)), VerticalSurfaceType.FLOOR, ConstantIntProvider.create(3), 0.8F, 2, 0.08F, UniformIntProvider.create(4, 7), 0.7F));
    //public static final ConfiguredFeature<?, ?> MYCELIUM_WITH_BLUE_CAVE_MUSHROOM = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.LUSH_GROUND_REPLACEABLE.getId(), SimpleBlockStateProvider.of(Blocks.MYCELIUM), () -> Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> SMALL_BLUE_CAVE_MUSHROOM, () -> LARGE_BLUE_CAVE_MUSHROOM)), VerticalSurfaceType.FLOOR, ConstantIntProvider.create(3), 0.8F, 2, 0.08F, UniformIntProvider.create(4, 7), 0.7F));
    //public static final ConfiguredFeature<?, ?> MUSHROOM_CAVES_MUSHROOMS = Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(ImmutableList.of(new RandomFeatureEntry(MYCELIUM_WITH_YELLOW_CAVE_MUSHROOM, 0.25F), new RandomFeatureEntry(MYCELIUM_WITH_PURPLE_CAVE_MUSHROOM, 0.25F), new RandomFeatureEntry(MYCELIUM_WITH_GREEN_CAVE_MUSHROOM, 0.25F), new RandomFeatureEntry(MYCELIUM_WITH_BLUE_CAVE_MUSHROOM, 0.25F)), BLANK)).decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.FLOOR, 12, false))).range(Decorators.BOTTOM_TO_TOP_BELOW_120).spreadHorizontally().repeat(30);
//
    //public static final ConfiguredFeature<?, ?> LAVA_SOURCE_CEILING = Feature.SIMPLE_BLOCK.configure(new SimpleBlockFeatureConfig(SimpleBlockStateProvider.of(Blocks.LAVA)));
    //public static final ConfiguredFeature<?, ?> SPARSE_SMALL_BASALT_COLUMNS = Feature.BASALT_COLUMNS.configure(new BasaltColumnsFeatureConfig(ConstantIntProvider.create(1), UniformIntProvider.create(2, 3))).decorate(Decorator.COUNT_MULTILAYER.configure(new CountConfig(3)).applyChance(50));
    //public static final ConfiguredFeature<?, ?> SPARSE_LARGE_BASALT_COLUMNS = Feature.BASALT_COLUMNS.configure(new BasaltColumnsFeatureConfig(UniformIntProvider.create(1, 2), UniformIntProvider.create(3, 5))).decorate(Decorator.COUNT_MULTILAYER.configure(new CountConfig(1)).applyChance(50));
    //public static final ConfiguredFeature<?, ?> LAVAROCK_PATCH = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.MOSS_REPLACEABLE.getId(), SimpleBlockStateProvider.of(BlockRegistry.LAVAROCK), () -> Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> SPARSE_SMALL_BASALT_COLUMNS, () -> SPARSE_LARGE_BASALT_COLUMNS)), VerticalSurfaceType.FLOOR, UniformIntProvider.create(2, 3), 0.0F, 5, 0.02F, UniformIntProvider.create(2, 5), 0.3F));
    //public static final ConfiguredFeature<?, ?> LAVAROCK_PATCH_CEILING = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.MOSS_REPLACEABLE.getId(), SimpleBlockStateProvider.of(BlockRegistry.LAVAROCK), () -> BLANK, VerticalSurfaceType.CEILING, UniformIntProvider.create(2, 3), 0.0F, 5, 0.002F, UniformIntProvider.create(2, 5), 0.3F));
    //public static final ConfiguredFeature<?, ?> MOLTEN_CAVES_VEGETATION = LAVAROCK_PATCH.decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.FLOOR, 12, false))).range(Decorators.BOTTOM_TO_TOP_BELOW_120).spreadHorizontally().repeat(60);
    //public static final ConfiguredFeature<?, ?> MOLTEN_CAVES_CEILING_VEGETATION = LAVAROCK_PATCH_CEILING.decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.CEILING, 12, false))).range(Decorators.BOTTOM_TO_TOP_BELOW_120).spreadHorizontally().repeat(60);
    //public static final ConfiguredFeature<?, ?> LAVAROCK_SPIKE = FeatureRegistry.BLOCK_SPIKE.configure(new BlockSpikeFeatureConfig(SimpleBlockStateProvider.of(Blocks.SMOOTH_BASALT), 30, UniformIntProvider.create(5, 9), UniformFloatProvider.create(0.4F, 1.2F), 0.25F, UniformFloatProvider.create(0.33F, 1.0F), UniformFloatProvider.create(0.33F, 1.0F), UniformFloatProvider.create(0.0F, 0.25F), 7, 0.5F)).range(Decorators.BOTTOM_TO_TOP_BELOW_120).spreadHorizontally().repeat(UniformIntProvider.create(16, 32));
    //public static final ConfiguredFeature<?, ?> SPARSE_MAGMA_DELTA = Feature.DELTA_FEATURE.configure(new DeltaFeatureConfig(BlockRegistry.MOLTEN_MAGMA.getDefaultState(), Blocks.MAGMA_BLOCK.getDefaultState(), UniformIntProvider.create(3, 6), UniformIntProvider.create(0, 2))).decorate(Decorator.COUNT_MULTILAYER.configure(new CountConfig(24)).applyChance(8));
    //public static final ConfiguredFeature<?, ?> SPARSE_DELTA = Feature.DELTA_FEATURE.configure(new DeltaFeatureConfig(Blocks.LAVA.getDefaultState(), Blocks.MAGMA_BLOCK.getDefaultState(), UniformIntProvider.create(4, 8), UniformIntProvider.create(1, 2))).decorate(Decorator.COUNT_MULTILAYER.configure(new CountConfig(20)).applyChance(5));
    //public static final ConfiguredFeature<?, ?> ORE_DIAMOND_EXTRA = Feature.ORE.configure(new OreFeatureConfig(ConfiguredFeatures.DIAMOND_ORE_TARGETS, 6, 0.5F)).triangleRange(YOffset.aboveBottom(-80), YOffset.aboveBottom(80)).spreadHorizontally().repeat(8);
    //public static final ConfiguredFeature<?, ?> ORE_DIAMOND_BURIED_EXTRA = Feature.ORE.configure(new OreFeatureConfig(ConfiguredFeatures.DIAMOND_ORE_TARGETS, 10, 1.0F)).triangleRange(YOffset.aboveBottom(-80), YOffset.aboveBottom(80)).spreadHorizontally().repeat(8);
    //public static final ConfiguredFeature<?, ?> ORE_DIAMOND_LARGE_EXTRA = Feature.ORE.configure(new OreFeatureConfig(ConfiguredFeatures.DIAMOND_ORE_TARGETS, 16, 0.7F)).triangleRange(YOffset.aboveBottom(-80), YOffset.aboveBottom(80)).spreadHorizontally().applyChance(8);
//
    //public static final ConfiguredFeature<?, ?> HOLE = FeatureRegistry.ROCK.configure(new RockFeatureConfig(Blocks.CAVE_AIR.getDefaultState(), UniformIntProvider.create(2, 5)));
    //public static final ConfiguredFeature<?, ?> ARIDSTONE_ROCK = FeatureRegistry.ROCK.configure(new RockFeatureConfig(BlockRegistry.ARIDSTONE.getDefaultState(), ConstantIntProvider.create(2)));
    //public static final ConfiguredFeature<?, ?> BIG_ARIDSTONE_ROCK = FeatureRegistry.ROCK.configure(new RockFeatureConfig(BlockRegistry.ARIDSTONE.getDefaultState(), UniformIntProvider.create(3, 4)));
    //public static final ConfiguredFeature<?, ?> ARID_VEGETATION = Feature.RANDOM_SELECTOR.configure(new RandomFeatureConfig(List.of(new RandomFeatureEntry(BIG_ARIDSTONE_ROCK, 0.2F), new RandomFeatureEntry(ARIDSTONE_ROCK, 0.5F), new RandomFeatureEntry(HOLE, 0.2F)), Feature.SIMPLE_BLOCK.configure(new SimpleBlockFeatureConfig(SimpleBlockStateProvider.of(Blocks.DEAD_BUSH)))));
    //public static final ConfiguredFeature<?, ?> ARIDSTONE_PATCH = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.MOSS_REPLACEABLE.getId(), SimpleBlockStateProvider.of(BlockRegistry.ARIDSTONE), () -> ARID_VEGETATION, VerticalSurfaceType.FLOOR, UniformIntProvider.create(2, 3), 0.0F, 5, 0.02F, UniformIntProvider.create(2, 5), 0.3F));
    //public static final ConfiguredFeature<?, ?> ARIDSTONE_PATCH_CEILING = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.MOSS_REPLACEABLE.getId(), SimpleBlockStateProvider.of(BlockRegistry.ARIDSTONE), () -> BLANK, VerticalSurfaceType.CEILING, UniformIntProvider.create(2, 3), 0.0F, 5, 0.0F, UniformIntProvider.create(2, 5), 0.3F));
    //public static final ConfiguredFeature<?, ?> ARID_CAVES_VEGETATION = ARIDSTONE_PATCH.decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.FLOOR, 12, false))).range(Decorators.BOTTOM_TO_TOP_BELOW_120).spreadHorizontally().repeat(60);
    //public static final ConfiguredFeature<?, ?> ARID_CAVES_CEILING_VEGETATION = ARIDSTONE_PATCH_CEILING.decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.CEILING, 12, false))).range(Decorators.BOTTOM_TO_TOP_BELOW_120).spreadHorizontally().repeat(60);
    //public static final ConfiguredFeature<?, ?> SAND_POOL = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.LUSH_GROUND_REPLACEABLE.getId(), SimpleBlockStateProvider.of(Blocks.SAND), () -> ARID_VEGETATION, VerticalSurfaceType.FLOOR, ConstantIntProvider.create(3), 0.8F, 2, 0.1F, UniformIntProvider.create(4, 7), 0.7F));
    //public static final ConfiguredFeature<?, ?> QUICKSAND_POOL = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.LUSH_GROUND_REPLACEABLE.getId(), SimpleBlockStateProvider.of(BlockRegistry.QUICKSAND), () -> BLANK, VerticalSurfaceType.FLOOR, UniformIntProvider.create(1, 3), 0.1F, 1, 0.0F, UniformIntProvider.create(1, 2), 0.1F));
    //public static final ConfiguredFeature<?, ?> ARID_CAVES_SAND = Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> SAND_POOL, () -> QUICKSAND_POOL)).decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.FLOOR, 12, false))).range(Decorators.BOTTOM_TO_TOP_BELOW_120).spreadHorizontally().repeat(40);
    //public static final ConfiguredFeature<?, ?> SANDSTONE_PILLAR = FeatureRegistry.BLOCK_PILLAR.configure(new SingleStateFeatureConfig(Blocks.SANDSTONE.getDefaultState())).range(Decorators.BOTTOM_TO_TOP_BELOW_120).spreadHorizontally().repeat(5);
    //public static final ConfiguredFeature<?, ?> ARIDSTONE_PILLAR = FeatureRegistry.BLOCK_PILLAR.configure(new SingleStateFeatureConfig(BlockRegistry.ARIDSTONE.getDefaultState())).range(Decorators.BOTTOM_TO_TOP_BELOW_120).spreadHorizontally().repeat(5);
//
    //public static final ConfiguredFeature<?, ?> CRYSTAL_VEGETATION = FeatureRegistry.SIMPLE_BLOCK_WITH_BASE.configure(new TwoSimpleBlocksFeatureConfig(SimpleBlockStateProvider.of(BlockRegistry.CRYSTAL_FLOWER), SimpleBlockStateProvider.of(BlockRegistry.CRYSTALLINE_LUMINITE)));
    ////public static final ConfiguredFeature<?, ?> CRYSTAL_CEILING_VEGETATION = Feature.SIMPLE_BLOCK.configure(new SimpleBlockFeatureConfig(SimpleBlockStateProvider.of(BlockRegistry.CRYSTAL_FLOWER)));
    //public static final ConfiguredFeature<?, ?> LUMINITE_PATCH = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.MOSS_REPLACEABLE.getId(), SimpleBlockStateProvider.of(BlockRegistry.LUMINITE), () -> CRYSTAL_VEGETATION, VerticalSurfaceType.FLOOR, UniformIntProvider.create(2, 3), 0.0F, 5, 0.02F, UniformIntProvider.create(2, 5), 0.3F));
    //public static final ConfiguredFeature<?, ?> LUMINITE_PATCH_CEILING = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.MOSS_REPLACEABLE.getId(), SimpleBlockStateProvider.of(BlockRegistry.LUMINITE), () -> BLANK, VerticalSurfaceType.CEILING, UniformIntProvider.create(2, 3), 0.0F, 5, 0.02F, UniformIntProvider.create(2, 5), 0.3F));
    //public static final ConfiguredFeature<?, ?> CRYSTAL_CAVES_VEGETATION = LUMINITE_PATCH.decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.FLOOR, 16, false))).range(Decorators.BOTTOM_TO_TOP_BELOW_120).spreadHorizontally().repeat(60);
    //public static final ConfiguredFeature<?, ?> CRYSTAL_CAVES_CEILING_VEGETATION = LUMINITE_PATCH_CEILING.decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.CEILING, 16, false))).range(Decorators.BOTTOM_TO_TOP_BELOW_120).spreadHorizontally().repeat(60);
    //public static final ConfiguredFeature<?, ?> CRYSTAL_BLOCK_POOL = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.LUSH_GROUND_REPLACEABLE.getId(), SimpleBlockStateProvider.of(BlockRegistry.CRYSTAL_BLOCK), () -> CRYSTAL_VEGETATION, VerticalSurfaceType.FLOOR, ConstantIntProvider.create(3), 0.8F, 2, 0.033F, UniformIntProvider.create(4, 7), 0.7F)).decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.FLOOR, 12, true))).range(Decorators.BOTTOM_TO_TOP_BELOW_120).spreadHorizontally().repeat(20);
    //public static final ConfiguredFeature<?, ?> GIANT_CRYSTAL_SPIKE = FeatureRegistry.BLOCK_SPIKE.configure(new BlockSpikeFeatureConfig(SimpleBlockStateProvider.of(BlockRegistry.CRYSTAL_BLOCK), 48, UniformIntProvider.create(4, 15), UniformFloatProvider.create(0.4F, 1.5F), 0.25F, UniformFloatProvider.create(0.2F, 0.4F), UniformFloatProvider.create(0.2F, 0.4F), UniformFloatProvider.create(0.2F, 0.8F), 4, 0.2F)).range(Decorators.BOTTOM_TO_TOP_BELOW_120).spreadHorizontally().repeat(UniformIntProvider.create(8, 24));
    //public static final ConfiguredFeature<?, ?> DENSE_AMETHYST_GEODE = Feature.GEODE.configure(new GeodeFeatureConfig(new GeodeLayerConfig(SimpleBlockStateProvider.of(Blocks.AIR), SimpleBlockStateProvider.of(Blocks.AMETHYST_BLOCK), SimpleBlockStateProvider.of(Blocks.BUDDING_AMETHYST), SimpleBlockStateProvider.of(Blocks.CALCITE), SimpleBlockStateProvider.of(Blocks.SMOOTH_BASALT), ImmutableList.of(Blocks.SMALL_AMETHYST_BUD.getDefaultState(), Blocks.MEDIUM_AMETHYST_BUD.getDefaultState(), Blocks.LARGE_AMETHYST_BUD.getDefaultState(), Blocks.AMETHYST_CLUSTER.getDefaultState()), BlockTags.FEATURES_CANNOT_REPLACE.getId(), BlockTags.GEODE_INVALID_BLOCKS.getId()), new GeodeLayerThicknessConfig(1.7D, 2.2D, 3.2D, 4.2D), new GeodeCrackConfig(0.95D, 2.0D, 2), 0.35D, 0.083D, true, UniformIntProvider.create(4, 6), UniformIntProvider.create(3, 4), UniformIntProvider.create(1, 2), -16, 16, 0.05D, 1)).uniformRange(YOffset.aboveBottom(6), YOffset.fixed(46)).spreadHorizontally().applyChance(21);
//
    //public static final ConfiguredFeature<?, ?> RIVERSLATE_PATCH = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.MOSS_REPLACEABLE.getId(), SimpleBlockStateProvider.of(BlockRegistry.RIVERSLATE), () -> Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> ConfiguredFeatures.JUNGLE_TREE, () -> ConfiguredFeatures.PATCH_GRASS_JUNGLE)), VerticalSurfaceType.FLOOR, UniformIntProvider.create(2, 3), 0.0F, 5, 0.04F, UniformIntProvider.create(2, 5), 0.3F));
    //public static final ConfiguredFeature<?, ?> RIVERSLATE_PATCH_CEILING = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.MOSS_REPLACEABLE.getId(), SimpleBlockStateProvider.of(BlockRegistry.RIVERSLATE), () -> BLANK, VerticalSurfaceType.CEILING, UniformIntProvider.create(2, 3), 0.0F, 5, 0.002F, UniformIntProvider.create(2, 5), 0.3F));
    //public static final ConfiguredFeature<?, ?> JUNGLE_CAVES_VEGETATION = RIVERSLATE_PATCH.decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.FLOOR, 12, false))).range(Decorators.BOTTOM_TO_TOP_BELOW_120).spreadHorizontally().repeat(32);
    //public static final ConfiguredFeature<?, ?> JUNGLE_CAVES_CEILING_VEGETATION = RIVERSLATE_PATCH_CEILING.decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.CEILING, 12, false))).range(Decorators.BOTTOM_TO_TOP_BELOW_120).spreadHorizontally().repeat(32);
    //public static final ConfiguredFeature<SimpleBlockFeatureConfig, ?> JUNGLE_VEGETATION = Feature.SIMPLE_BLOCK.configure(new SimpleBlockFeatureConfig(new WeightedBlockStateProvider(DataPool.<BlockState>builder().add(Blocks.FERN.getDefaultState(), 8).add(Blocks.LARGE_FERN.getDefaultState(), 4).add(Blocks.GRASS.getDefaultState(), 25).add(Blocks.TALL_GRASS.getDefaultState(), 10))));
    //public static final ConfiguredFeature<?, ?> GRASS_POOL = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.LUSH_GROUND_REPLACEABLE.getId(), SimpleBlockStateProvider.of(Blocks.GRASS_BLOCK), () -> Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> ConfiguredFeatures.JUNGLE_TREE, () -> JUNGLE_VEGETATION)), VerticalSurfaceType.FLOOR, ConstantIntProvider.create(1), 0.8F, 2, 0.1F, UniformIntProvider.create(5, 8), 0.7F));
    //public static final ConfiguredFeature<?, ?> GRASS_POOL_BUSHES = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.LUSH_GROUND_REPLACEABLE.getId(), SimpleBlockStateProvider.of(Blocks.GRASS_BLOCK), () -> Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> ConfiguredFeatures.JUNGLE_BUSH, () -> JUNGLE_VEGETATION)), VerticalSurfaceType.FLOOR, ConstantIntProvider.create(1), 0.8F, 2, 0.1F, UniformIntProvider.create(5, 8), 0.7F));
    //public static final ConfiguredFeature<?, ?> GRASS_POOL_TALL_TREES = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.LUSH_GROUND_REPLACEABLE.getId(), SimpleBlockStateProvider.of(Blocks.GRASS_BLOCK), () -> Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> ConfiguredFeatures.MEGA_JUNGLE_TREE, () -> JUNGLE_VEGETATION)), VerticalSurfaceType.FLOOR, ConstantIntProvider.create(1), 0.8F, 2, 0.1F, UniformIntProvider.create(5, 8), 0.7F));
    //public static final ConfiguredFeature<?, ?> MOSS_POOL = Feature.VEGETATION_PATCH.configure(new VegetationPatchFeatureConfig(BlockTags.LUSH_GROUND_REPLACEABLE.getId(), SimpleBlockStateProvider.of(Blocks.MOSS_BLOCK), () -> Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> ConfiguredFeatures.JUNGLE_TREE, () -> JUNGLE_VEGETATION)), VerticalSurfaceType.FLOOR, UniformIntProvider.create(1, 2), 0.1F, 1, 0.1F, UniformIntProvider.create(1, 3), 0.3F));
    //public static final ConfiguredFeature<?, ?> JUNGLE_CAVES_GRASS = Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> GRASS_POOL, () -> Feature.RANDOM_BOOLEAN_SELECTOR.configure(new RandomBooleanFeatureConfig(() -> GRASS_POOL_BUSHES, () -> GRASS_POOL_TALL_TREES)))), () -> MOSS_POOL)).decorate(Decorator.CAVE_SURFACE.configure(new CaveSurfaceDecoratorConfig(VerticalSurfaceType.FLOOR, 12, false))).range(Decorators.BOTTOM_TO_TOP_BELOW_120).spreadHorizontally().repeat(48);
    //public static final ConfiguredFeature<?, ?> SPARSE_WATER_DELTA = Feature.DELTA_FEATURE.configure(new DeltaFeatureConfig(Blocks.WATER.getDefaultState(), Blocks.GRASS_BLOCK.getDefaultState(), UniformIntProvider.create(3, 6), UniformIntProvider.create(1, 2))).decorate(Decorator.COUNT_MULTILAYER.configure(new CountConfig(24)).applyChance(8));
    //public static final ConfiguredFeature<?, ?> RIVERSLATE_ROCK = FeatureRegistry.BLOCK_SPIKE.configure(new BlockSpikeFeatureConfig(SimpleBlockStateProvider.of(BlockRegistry.RIVERSLATE), 30, UniformIntProvider.create(2, 5), UniformFloatProvider.create(0.45F, 0.9F), 0.25F, UniformFloatProvider.create(2.0F, 5.0F), UniformFloatProvider.create(2.0F, 5.0F), ConstantFloatProvider.create(0.0F), 0, 0.0F)).range(Decorators.BOTTOM_TO_TOP_BELOW_120).spreadHorizontally().repeat(UniformIntProvider.create(16, 32));
//
    //public static final ConfiguredFeature<TreeFeatureConfig, ?> PALO_VERDE = Feature.TREE.configure(new TreeFeatureConfig.Builder(BlockStateProvider.of(Blocks.ACACIA_LOG), new ForkingTrunkPlacer(5, 2, 2), BlockStateProvider.of(Blocks.ACACIA_LEAVES), new AcaciaFoliagePlacer(ConstantIntProvider.create(2), ConstantIntProvider.create(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build());
    //public static final ConfiguredFeature<?, ?> PALO_VERDE_CHECKED = PALO_VERDE.wouldSurvive(Blocks.ACACIA_SAPLING);
}